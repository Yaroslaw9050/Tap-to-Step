//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/TapToStep/Scripts/CompositionRoot/InputActions/TouchInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputActions
{
    public partial class @TouchInputAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TouchInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInputAction"",
    ""maps"": [
        {
            ""name"": ""GameTouch"",
            ""id"": ""62324636-b155-4c76-90b3-d5e8ff8f71e0"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Value"",
                    ""id"": ""f09a46e6-1388-466a-8f85-293b337eb632"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02b48cd4-269e-4000-8ca1-0a11af3bafbd"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameTouch
            m_GameTouch = asset.FindActionMap("GameTouch", throwIfNotFound: true);
            m_GameTouch_Tap = m_GameTouch.FindAction("Tap", throwIfNotFound: true);
        }

        ~@TouchInputAction()
        {
            UnityEngine.Debug.Assert(!m_GameTouch.enabled, "This will cause a leak and performance issues, TouchInputAction.GameTouch.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameTouch
        private readonly InputActionMap m_GameTouch;
        private List<IGameTouchActions> m_GameTouchActionsCallbackInterfaces = new List<IGameTouchActions>();
        private readonly InputAction m_GameTouch_Tap;
        public struct GameTouchActions
        {
            private @TouchInputAction m_Wrapper;
            public GameTouchActions(@TouchInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Tap => m_Wrapper.m_GameTouch_Tap;
            public InputActionMap Get() { return m_Wrapper.m_GameTouch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameTouchActions set) { return set.Get(); }
            public void AddCallbacks(IGameTouchActions instance)
            {
                if (instance == null || m_Wrapper.m_GameTouchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameTouchActionsCallbackInterfaces.Add(instance);
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
            }

            private void UnregisterCallbacks(IGameTouchActions instance)
            {
                @Tap.started -= instance.OnTap;
                @Tap.performed -= instance.OnTap;
                @Tap.canceled -= instance.OnTap;
            }

            public void RemoveCallbacks(IGameTouchActions instance)
            {
                if (m_Wrapper.m_GameTouchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameTouchActions instance)
            {
                foreach (var item in m_Wrapper.m_GameTouchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameTouchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameTouchActions @GameTouch => new GameTouchActions(this);
        public interface IGameTouchActions
        {
            void OnTap(InputAction.CallbackContext context);
        }
    }
}
